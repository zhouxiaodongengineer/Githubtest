package com.day01.Demo03;

interface ListInterface
{
    public boolean add(int index,String e);
    public boolean delete(int index);
    public boolean alter(int index,String e);
    public int search(String e);
}
public class SequenceList implements ListInterface
{
    String []elements;
    final static int DEFAULT_ARRAY_SIZE=10;
    final static int MAX_ARRAY_SIZE=Integer.MAX_VALUE;
    int size;
    //默认初始，分配的空间为默认空间
    public SequenceList()
    {
        this.size=0;
        elements=new String[DEFAULT_ARRAY_SIZE];
    }
    //这个可以自己初始化空间大小
    public SequenceList(int initialSize)
    {
        if (initialSize>MAX_ARRAY_SIZE)
        {
            throw new IllegalArgumentException();//IllegalArgumentException异常表示参数不合法异常
        }
        elements=new String[initialSize];
        this.size=0;
    }
    @Override
    public boolean add(int index,String e)
    {
        //1.看插入位置是否合法
        checkArrayBoundAdd(index);
        //2.看是否有空间插入
        if (size+1-MAX_ARRAY_SIZE>0)
        {
            throw new ArrayIndexOutOfBoundsException();
        }
        if (size+1>DEFAULT_ARRAY_SIZE)
        {
            growCapacity(size+1);
        }
        //3.插入元素
        int i;
        for (i=size-1;i>=index;i--)
        {
            elements[i+1]=elements[i];
        }
        elements[i+1]=e;
        //4.修改顺序表的大小
        size++;
        return false;
    }

    private void growCapacity(int neededCapacity)
    {
        int oldCapacity=size;
        int newCapacity=oldCapacity+(oldCapacity>>1);
        //当size为0和1的时候
        if (newCapacity-neededCapacity<0)
        {
            newCapacity=neededCapacity;
        }
        if (neededCapacity<0)
        {
            neededCapacity=MAX_ARRAY_SIZE;
        }
        String []newArray=new String[newCapacity];
        for (int i=0;i<size;i++)
        {
            newArray[i]=elements[i];
        }
        elements=newArray;
    }
    //检查插入位置是否合适
    public void checkArrayBoundAdd(int index)
    {
        if (index<0||index>size)
        {
            System.out.println("数组下标异常：index="+index);
           System.exit(1);
        }
    }
    @Override
    public boolean delete(int index)
    {
        checkArrayBoundDelete(index);
        int i;
        for (i=index;i<size-1;i++)
        {
            elements[i]=elements[i+1];
        }
        elements[i]=null;
        size--;
        return true;
    }
    public void checkArrayBoundDelete(int index)
    {
        if (index<0||index>size-1)
        {
            System.out.println("数组下标异常：index="+index);
            System.exit(1);
        }
    }
    @Override
    public boolean alter(int index,String e)
    {
        checkArrayBoundDelete(index);

        elements[index]=e;
        return true;
    }

    @Override
    public int search(String e)
    {
        if (e==null)
        {
            for (int i=0;i<size;i++)
            {
                if (e==elements[i])
                    return i;
            }
        }
        else
        {
            for (int i=0;i<size;i++)
            {
                if (e.equals(elements[i]))
                {
                    return i;
                }
            }
        }
        return -1;
    }
    public String toString()
    {
        StringBuilder stringBuilder=new StringBuilder("[");
        for (int i=0;i<size;i++)
        {
            if (i!=size-1)
            {
                stringBuilder.append(elements[i]+", ");
            }
            else
            {
                stringBuilder.append(elements[i]+"]");
            }
        }
        return stringBuilder.toString();
    }
}
